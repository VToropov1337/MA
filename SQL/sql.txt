SELECT
CONCAT_WS('','https://ma-metro.millionagents.com/data2/answer/image/', answer_files.id, '/', file) as url,reports.id as report_id, geo_objects.title
FROM ma_metro.reports
JOIN ma_metro.tasks
ON reports.task_id = tasks.id
JOIN ma_metro.geo_objects
ON tasks.geo_object_id = geo_objects.id
JOIN ma_metro.answers
ON answers.report_id = reports.id
JOIN ma_metro.answer_files
ON answers.id = answer_files.answer_id
WHERE reports.id IN (range)
AND answers.key = 'photo_0'
LIMIT 100;


=====
SELECT * FROM ma_metro.conveyor_jobs
JOIN reports
ON reports.id = conveyor_jobs.target_id
AND conveyor_jobs.target_type = 'Report'
JOIN ma_metro.tasks
ON tasks.id = reports.task_id
WHERE conveyor_jobs.blueprint_id = 2
AND tasks.geo_object_id = 16152
AND conveyor_jobs.state = 'active'
AND (not exists(select 1 from ma_metro.conveyor_jobs_decisions cjd where cjd.job_id = conveyor_jobs.id));

======
SELECT reports.id, reports.metro_price, cv_responses.response
FROM ma_metro.reports
JOIN ma_metro.conveyor_jobs
ON reports.id = conveyor_jobs.target_id
JOIN ma_metro.cv_responses
ON cv_responses.target_id = conveyor_jobs.id
WHERE reports.state = 'accepted'
AND
cv_responses.state = 'completed'
AND
cv_responses.req_type = 'get_bulk_result_detect_classify_images'
LIMIT 10;


======
SELECT DISTINCT moderator_id, first_name, last_name, COUNT(*) FROM ma_metro.reports r
JOIN ma_metro.tasks t
ON r.task_id = t.id
JOIN ma_metro.users u
ON r.moderator_id = u.id
WHERE t.wave = ‘m54_2718_btf’
AND r.metro_available = False
AND r.state = ‘accepted’
GROUP BY moderator_id, first_name, last_name;


======
SELECT rr.metro_price,cv_responses.response,geo_objects.title,rr.id
FROM ma_metro.reports r
JOIN ma_metro.tasks
ON r.task_id = tasks.id
JOIN ma_metro.geo_objects
ON geo_objects.id = tasks.geo_object_id
JOIN ma_metro.conveyor_jobs cj1
ON r.id = cj1.target_id
JOIN ma_metro.cv_responses
ON cv_responses.target_id = cj1.id
JOIN ma_metro.reports rr
ON r.id = rr.origin_report_id
JOIN ma_metro.conveyor_jobs cj2
ON rr.id = cj2.target_id
WHERE cv_responses.state = 'completed'
AND rr.state = 'accepted'
AND cj1.wave = 'magnit-cv-test3'
AND cj2.chain_element_id = 57
AND cv_responses.req_type = 'get_bulk_result_detect_classify_images';



======
SELECT * FROM ma_metro.reports as r
JOIN ma_metro.conveyor_jobs
   ON r.id = conveyor_jobs.target_id
JOIN ma_metro.cv_responses
   ON cv_responses.target_id = conveyor_jobs.id
JOIN ma_metro.reports rr
   ON r.id = rr.origin_report_id
WHERE request->'urls'->0 ? 'https:///image/30378794/f11999f7-6812-4f06-9113-627838576349.jpg';



======
SELECT *, CONCAT_WS(‘’,‘https:///image', answer_files.id, ‘/’, file) as url,reports.id FROM ma_metro.reports
JOIN ma_metro.tasks
    ON reports.task_id = tasks.id
JOIN ma_metro.geo_objects
    ON tasks.geo_object_id = geo_objects.id
JOIN ma_metro.answers
    ON answers.report_id = reports.id
JOIN ma_metro.answer_files
    ON answers.id = answer_files.answer_id
WHERE answer_files.id = 20806969
AND file = ‘1ac8570a-573f-4faa-bb3a-b6f58f15e4e0.jpeg’
LIMIT 5;


======
SELECT * FROM ma_metro.reports
JOIN ma_metro.answers
   ON answers.report_id = reports.id
JOIN ma_metro.answer_files
   ON answers.id = answer_files.answer_id
WHERE reports.source = '6d528cb7-3443-4e72-8f60-0e7acc327b33.zip'
AND answers.type = 'media_file';



======
SELECT COUNT(*) FROM m10.answers
INNER JOIN m10.reports
    ON answers.report_id = reports.id
INNER JOIN m10.answer_files
    ON answer_files.answer_id = answers.id
WHERE answers.key = 'photo_price'
AND reports.id = 2670405;


======
SELECT COUNT(DISTINCT(answer_files.id)), COUNT(DISTINCT(r2.id)) FROM m10.answers
INNER JOIN m10.reports r1
    ON answers.report_id = r1.id
INNER JOIN m10.answer_files
    ON answer_files.answer_id = answers.id
INNER JOIN m10.reports r2
    ON r2.source_report_id = r1.id
WHERE answers.key = 'photo_price'
AND r1.id = 2670405;



======
SELECT g.id, g.title, t.id, t.title,COUNT(DISTINCT(answer_files.id)), COUNT(DISTINCT(r2.id)),r1 FROM m10.answers
INNER JOIN m10.reports r1
    ON answers.report_id = r1.id
INNER JOIN m10.answer_files
    ON answer_files.answer_id = answers.id
INNER JOIN m10.tasks t
    ON r1.task_id = t.id
INNER JOIN m10.geo_objects g
    ON g.id = t.geo_object_id
INNER JOIN m10.reports r2
    ON r2.source_report_id = r1.id
WHERE answers.key = 'photo_price'
AND t.id = 149247
AND t.wave = 'S6_fullscan_september18'
GROUP BY (g.id, g.title, t.id, t.title,r1);


======
SELECT g.id, g.title, t.id, t.title,COUNT(DISTINCT(answer_files.id)) as photos_qty, COUNT(DISTINCT(r2.id))as reports2, r1.id, COUNT(DISTINCT(r1))
FROM ma_metro.reports r1
INNER JOIN ma_metro.tasks t
    ON r1.task_id = t.id
INNER JOIN ma_metro.reports r2
    ON r2.origin_report_id = r1.id
INNER JOIN ma_metro.answers
    ON answers.report_id = r1.id
INNER JOIN ma_metro.answer_files
   ON answer_files.answer_id = answers.id
INNER JOIN ma_metro.geo_objects g
   ON g.id = t.geo_object_id
AND t.wave = 'os_auchan_40-18'
AND answers.key = 'photo_price'
AND g.id = 16382
AND r1.state = 'accepted'
AND r2.state NOT IN ('system_duplicate','invalid_article', 'poor_quality_photo')
GROUP BY (g.id, g.title, t.id, t.title, r1.id);


======
select a.user_id, count (distinct id) q  from
(select j.id jid, jd.* from ma_metro.conveyor_jobs j
left outer join ma_metro.conveyor_jobs_decisions jd on j.id=jd.job_id
where j.wave='os_auchan_40-18' and j.chain_element_id=69 and jd.state='faulted') as a
group by a.user_id
order by q desc


======
SELECT json_agg((chain_element_id)) FROM ma_metro.conveyor_jobs
INNER JOIN ma_metro.conveyor_jobs_decisions
    ON conveyor_jobs_decisions.job_id=conveyor_jobs.id
WHERE conveyor_jobs.target_id = 17966730;


======
SELECT COUNT(CONCAT_WS(‘’,‘https://m/image/', r2.metro_price_photo_id, ‘/’,answer_files.file))
FROM ma_metro.reports r2
JOIN ma_metro.answer_files
    ON answer_files.id = r2.metro_price_photo_id
JOIN ma_metro.articles
    ON articles.id = r2.article_id
WHERE r2.metro_available = True
AND r2.state = ‘accepted’
LIMIT 10;


=====
SELECT u.id, CONCAT_WS(' ’,u.first_name,u.last_name) as name,u.roles, d.platform,d.specs->‘device’,d.specs->‘os’, d.last_sign_in_at FROM ma_metro.users u
JOIN ma_metro.devices d
    ON d.user_id = u.id
WHERE platform != ‘browser’
AND roles = ‘{worker}’


======
SELECT  u.id as user_id, CONCAT_WS(' ',u.first_name,u.last_name) as fullname,u.roles, d.platform,d.specs->'device',d.specs->'os'
FROM ma_metro.users u
JOIN ma_metro.reports r
    ON r.user_id = u.id
JOIN ma_metro.devices d
    ON d.user_id = u.id
JOIN ma_metro.tasks
    ON tasks.id = r.task_id
WHERE tasks.project_id = 1
AND r.created_at::text LIKE '2018%'
AND platform != 'browser'
GROUP BY (u.id,d.platform,d.specs->'device',d.specs->'os')
LIMIT 10;


======
SELECT CASE
   WHEN category_id = 1 THEN 'гипермаркет'
   WHEN category_id = 2 THEN 'дискаунтер'
   WHEN category_id = 3 THEN 'супермаркет'
END as type,
title, id,category_id FROM ma_metro.geo_objects
WHERE id IN (range)


======
select array_agg(id) from ma_metro.users where phone in (?)


======
SELECT g.city, g.id, g.title, t.id, t.title,COUNT(DISTINCT(answer_files.id)) as photos_qty, COUNT(DISTINCT(r2.id))as reports2, r1.id, r1.performer_id, CONCAT_WS(' ',u.first_name,u.last_name) as name, u.phone
FROM ma_metro.reports r1
INNER JOIN ma_metro.tasks t ON r1.task_id = t.id
INNER JOIN ma_metro.reports r2 ON r2.origin_report_id = r1.id
INNER JOIN ma_metro.answers ON answers.report_id = r1.id
INNER JOIN ma_metro.answer_files ON answer_files.answer_id = answers.id
INNER JOIN ma_metro.geo_objects g ON g.id = t.geo_object_id
INNER JOIN ma_metro.users u ON u.id = r1.performer_id
WHERE t.wave = ? AND answers.key = 'photo_price' AND r1.state = 'accepted'
GROUP BY (g.city, g.id, g.title, t.id, t.title, r1.id,r1.performer_id, name, u.phone);


======
SELECT e.block_class_name as title,
      sum(case j.state when 'active' then 1 else 0 end) AS active,
      sum(case j.state when 'completed' then 1 else 0 end) AS completed,
      sum(case j.state when 'paused' then 1 else 0 end) AS paused
      FROM conveyor_jobs j
      INNER JOIN conveyor_elements e ON j.chain_element_id = e.id
      WHERE j.blueprint_id = #{ clientreq.blueprint_id }
        AND j.wave IN #{ Report.send(:sanitize_sql, ["(?)", clientreq.waves]) }
      GROUP BY e.block_class_name
      ORDER BY e.block_class_name ASC


=====
SELECT * FROM reports
LEFT JOIN answers
	ON reports.id = answers.report_id
WHERE user_id = 1728
AND EXTRACT(DAY FROM created_at) = 20;


======
SELECT f FROM (SELECT DISTINCT(title),REGEXP_REPLACE(title, '_.*', '') AS f
FROM ma_metro.geo_objects) as a
GROUP BY f;




======
SELECT DISTINCT ON(r2.article_id) r2.article_id, CONCAT_WS('','https://ma-metro.millionagents.com/data2/answer/image/', answer_files.id, '/', file) as url
FROM ma_metro.reports r
INNER JOIN ma_metro.reports r2
	ON r.id = r2.origin_report_id
INNER JOIN ma_metro.tasks t
	ON r2.task_id = t.id
JOIN ma_metro.answer_files
    ON answer_files.id = r2.metro_price_photo_id
INNER JOIN ma_metro.geo_objects
    ON t.geo_object_id = geo_objects.id
WHERE t.project_id = 2
AND r2.state = 'accepted'
AND r2.metro_available = True
AND r2.metro_promo = True
AND r2.created_at >= '2018-01-11'
AND r2.created_at <= '2018-11-10'
AND geo_objects.title = 'АШАН'
AND t.title NOT IN ('ОВОЩИ (Если товар упакован, обязательна фотография этикетки)','ФРУКТЫ (Если товар упакован, обязательна фотография этикетки)')
LIMIT 1000;
